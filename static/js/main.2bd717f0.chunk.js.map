{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/Scroll.js","Components/Searchbox.js","Components/ErrorBoundary.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","robots","map","user","i","key","Scroll","props","style","overflowY","border","height","children","Searchbox","searchField","searchChange","type","placeholder","onChange","ErrorBoundary","state","haserror","error","info","this","setState","Component","App","executesearch","event","searchfield","target","value","fetch","then","response","json","users","filteredRobot","filter","r","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"sNAgBeA,EAbF,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,GAAIC,EAAe,EAAfA,KAAMC,EAAS,EAATA,MACrB,OACJ,yBAAKC,UAAU,uDACX,yBAAKC,IAAI,SAASC,IAAG,+BAA0BL,EAA1B,mBACrB,6BACI,4BAAKC,GACL,2BAAIC,EAAJ,QCUOI,EAhBE,SAAC,GAAY,IAAXC,EAAU,EAAVA,OAGf,OACI,6BACPA,EAAOC,KAAI,SAACC,EAAMC,GACf,OAAQ,kBAAC,EAAD,CACAC,IAAKD,EACLV,GAAIS,EAAKT,GACTC,KAAMQ,EAAKR,KACXC,MAAOO,EAAKP,aCHTU,EARD,SAACC,GACX,OACA,yBAAKC,MAAQ,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAC7DJ,EAAMK,WCSJC,EAZE,SAAC,GAA+B,EAA9BC,YAA+B,IAAlBC,EAAiB,EAAjBA,aAChC,OACI,yBAAKlB,UAAY,OACb,2BACAA,UAAU,mCACVmB,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCYHI,E,YAlBX,aAAc,IAAD,8BACT,+CACKC,MAAM,CACPC,UAAU,GAHL,E,+EAMKC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAGzB,OAAIG,KAAKJ,MAAMC,SACJ,qDAEJG,KAAKjB,MAAMK,a,GAdEc,aC4DbC,E,YAjDX,aAAc,IAAD,8BACT,+CAcJC,cAAgB,SAACC,GACb,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SAdzC,EAAKZ,MAAM,CACPnB,OAAQ,GACR6B,YAAY,IAJP,E,iFASO,IAAD,OACfG,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAU,EAAKZ,SAAS,CAACxB,OAAQoC,S,+BAQlC,IAAD,EAC0Bb,KAAKJ,MAA5BnB,EADH,EACGA,OAAQ6B,EADX,EACWA,YAETQ,EAAgBrC,EAAOsC,QAAO,SAAAC,GAChC,OAAOA,EAAE7C,KAAK8C,cAAcC,SAASZ,EAAYW,kBAErD,OAAoB,IAAhBxC,EAAO0C,OACA,0CAIP,yBAAK9C,UAAU,MACX,wBAAIA,UAAU,MAAd,gBAGA,kBAAC,EAAD,CAAWkB,aAAcS,KAAKI,gBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACH,kBAAC,EAAD,CAAU3B,OAAWqC,IADlB,Y,GAtCFZ,aCAEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACT,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD2H1B,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAApC,GACLqC,QAAQrC,MAAMA,EAAMsC,a","file":"static/js/main.2bd717f0.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Card = ({id, name, email})=>{\r\n    return(\r\n<div className='tc bg-light-green dib br3 pa3 ma2 bw2 grow shadow-5'>\r\n    <img alt='Robots' src={`https://robohash.org/${id}?size=200x200`} />\r\n    <div>\r\n        <h2>{name}</h2>\r\n        <p>{email} </p>\r\n    </div>\r\n</div>\r\n\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots})=>{\r\n    // throw new Error(\"nooo\");\r\n//const cardComponent = \r\n    return(\r\n        <div >\r\n{robots.map((user, i)=>{\r\n    return (<Card \r\n            key={i} \r\n            id={user.id} \r\n            name={user.name}\r\n            email={user.email}/>);\r\n})}\r\n</div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst Scroll =(props) =>{\r\n    return (\r\n    <div style ={{overflowY: 'scroll', border: '5px solid black', height: '500px'}}>\r\n            {props.children}  \r\n    </div>\r\n)};\r\n\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\nconst Searchbox =({searchField, searchChange})=> {\r\nreturn (\r\n    <div className = 'pa2'>\r\n        <input \r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search' \r\n        placeholder='search robots'\r\n        onChange={searchChange}/>\r\n    </div>\r\n)};\r\n\r\n\r\nexport default Searchbox;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            haserror: false\r\n        }\r\n    };\r\n    componentDidCatch(error, info){\r\n        this.setState({haserror: true});\r\n    }\r\n    render(){\r\n        if (this.state.haserror){\r\n            return <h1>Opps that is not good</h1>\r\n        }\r\n        return this.props.children;\r\n    }\r\n\r\n}\r\n\r\nexport default ErrorBoundary;","import React ,{Component} from 'react';\r\nimport CardList from '../Components/CardList'\r\nimport Scroll from '../Components/Scroll';\r\n import {robots} from '../Components/robots';\r\nimport Searchbox from '../Components/Searchbox';\r\nimport ErrorBoundary from '../Components/ErrorBoundary'\r\n\r\nconst state = {\r\n    robots: robots,\r\n    searchfield:''\r\n}\r\n\r\nclass App extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            robots: [],\r\n            searchfield:''\r\n        }\r\n    }\r\n\r\n\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(users => {this.setState({robots: users})})\r\n            }\r\n\r\n    executesearch = (event) => {\r\n        this.setState({searchfield: event.target.value})\r\n       // console.log(filteredRobot);\r\n       \r\n    }\r\n    render(){\r\n        const {robots, searchfield} = this.state;\r\n\r\n        const filteredRobot = robots.filter(r=>{\r\n            return r.name.toLowerCase().includes(searchfield.toLowerCase())\r\n        })\r\n        if (robots.length===0){\r\n            return <h1>Loading...</h1>\r\n\r\n        }\r\n        return (\r\n            <div className='tc'>\r\n                <h1 className='f1'>\r\n                    Robo Friends\r\n                </h1>\r\n                <Searchbox searchChange={this.executesearch}/>\r\n                <Scroll>\r\n                    <ErrorBoundary>\r\n                 <CardList robots = { filteredRobot }/>);\r\n                 </ErrorBoundary>\r\n                </Scroll>\r\n                \r\n            </div>)\r\n    \r\n    }\r\n\r\n\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App.js';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}